generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String  @id @default(uuid()) @db.Uuid
  name        String
  image       String?
  email       String  @unique
  verified    Boolean @default(false)
  password    String?
  phoneNumber String? @unique @map("phone_number")

  roleId         String  @map("role_id") @db.Uuid
  organizationId String? @map("organization_id") @db.Uuid

  role         Role          @relation(fields: [roleId], references: [id])
  organization Organization? @relation(fields: [organizationId], references: [id])

  otp            Otp[]
  cart           Cart[]
  notification   UserNotification[]
  passwordReset  PasswordReset[]
  merchantAccess MerchantAccess[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("user")
}

model Organization {
  id   String  @id @default(uuid()) @db.Uuid
  name String  @unique
  logo String?

  user     User[]
  merchant Merchant[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("organization")
}

model Role {
  id   String    @id @default(uuid()) @db.Uuid
  name RoleNames @unique

  User User[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("role")
}

model UserNotification {
  id          String  @id @default(uuid()) @db.Uuid
  name        String
  viewed      Boolean @default(false)
  description String

  userId String @map("user_id") @db.Uuid

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("user_notification")
}

model Otp {
  id        String   @id @default(uuid()) @db.Uuid
  otp       String
  used      Boolean  @default(false)
  expiredAt DateTime @map("expired_at") @db.Timestamptz()

  userId String @map("user_id") @db.Uuid

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("otp")
}

model PasswordReset {
  id        String   @id @default(uuid()) @db.Uuid
  used      Boolean  @default(false)
  token     String
  expiredAt DateTime @map("expired_at") @db.Timestamptz()

  userId String @map("user_id") @db.Uuid

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("password_reset")
}

model Category {
  id   String @id @default(uuid()) @db.Uuid
  name String

  merchantId String @map("merchant_id") @db.Uuid

  merchant Merchant @relation(fields: [merchantId], references: [id])

  menu Menu[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("category")
}

model Merchant {
  id                  String                @id @default(uuid()) @db.Uuid
  name                String
  banner              Json                  @db.Json
  qrisImage           String?               @map("qris_image")
  paymentSubscription PaymentSubscription[]

  organizationId String @map("organization_id") @db.Uuid
  subscriptionId String @map("subscription_id") @db.Uuid

  organization Organization @relation(fields: [organizationId], references: [id])
  subscription Subscription @relation(fields: [subscriptionId], references: [id])

  order          Order[]
  category       Category[]
  merchantAccess MerchantAccess[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("merchant")
}

model Menu {
  id        String  @id @default(uuid()) @db.Uuid
  name      String
  image     String
  price     Int
  available Boolean @default(true)

  categoryId String @map("category_id") @db.Uuid

  category Category @relation(fields: [categoryId], references: [id])

  cartItem CartItem?

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("menu")
}

model MerchantAccess {
  id String @id @default(uuid()) @db.Uuid

  userId     String @map("user_id") @db.Uuid
  merchantId String @unique @map("merchant_id") @db.Uuid

  user     User     @relation(fields: [userId], references: [id])
  merchant Merchant @relation(fields: [merchantId], references: [id])

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("merchant_access")
}

model Cart {
  id       String  @id @default(uuid()) @db.Uuid
  finished Boolean @default(false)

  userId String @map("user_id") @db.Uuid

  user User @relation(fields: [userId], references: [id])

  order    Order?
  cartItem CartItem[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("cart")
}

model CartItem {
  id       String @id @default(uuid()) @db.Uuid
  quantity Int

  cartId String @map("cart_id") @db.Uuid
  menuId String @unique @map("menu_id") @db.Uuid

  cart Cart @relation(fields: [cartId], references: [id])
  menu Menu @relation(fields: [menuId], references: [id])

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("cart_item")
}

model Order {
  id          String      @id @default(uuid()) @db.Uuid
  type        OrderType   @default(DINE_IN)
  total       Int
  orderStatus OrderStatus @default(UNPAID) @map("order_status")

  cartId         String @unique @map("cart_id") @db.Uuid
  merchantId     String @map("merchant_id") @db.Uuid
  paymentOrderId String @unique @map("payment_order_id") @db.Uuid

  cart         Cart         @relation(fields: [cartId], references: [id])
  merchant     Merchant     @relation(fields: [merchantId], references: [id])
  paymentOrder PaymentOrder @relation(fields: [paymentOrderId], references: [id])

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("order")
}

model Subscription {
  id        String   @id @default(uuid()) @db.Uuid
  expiredAt DateTime @map("expired_at") @db.Timestamptz()

  subscriptionTypeId String @unique @map("subscription_type_id") @db.Uuid

  subscriptionType SubscriptionType @relation(fields: [subscriptionTypeId], references: [id])

  merchant            Merchant[]
  paymentSubscription PaymentSubscription?

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("subscription")
}

model PaymentSubscription {
  id              String @id @default(uuid()) @db.Uuid
  status          String
  snapToken       String @map("snap_token")
  paymentMethod   String @map("payment_method")
  snapRedirectUrl String @map("snap_redirect_url")

  merchantId         String @map("merchant_id") @db.Uuid
  subscriptionId     String @unique @map("subscription_id") @db.Uuid
  subscriptionTypeId String @unique @map("subscription_type_id") @db.Uuid

  merchant         Merchant         @relation(fields: [merchantId], references: [id])
  subscription     Subscription     @relation(fields: [subscriptionId], references: [id])
  subscriptionType SubscriptionType @relation(fields: [subscriptionTypeId], references: [id])

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("payment_subscription")
}

model PaymentOrder {
  id            String @id @default(uuid()) @db.Uuid
  status        String
  paymentMethod String @map("payment_method")

  order Order?

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("payment_order")
}

model SubscriptionType {
  id    String @id @default(uuid()) @db.Uuid
  name  String
  price Int

  subscription        Subscription?
  paymentSubscription PaymentSubscription?

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("subscription_type")
}

enum OrderType {
  DINE_IN
  TAKE_AWAY
}

enum OrderStatus {
  UNPAID
  COOKING
  COMPLETED
}

enum RoleNames {
  ADMIN
  USER
  OWNER
  MANAGER
  MERCHANT
  KITCHEN
  CASHIER
}
